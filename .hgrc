[ui]
editor = vim
username = Brian Wyant <wyantb@gmail.com>
#username = Brian Wyant <brian.wyant@oracle.com>

#ssh = ssh -i "/home/brian/.ssh/id_rsa"

# Do everything by hand, they said, it'll be great, they said
# (WARNING only use for experimentation, overrides config in [merge-tools] section)
# http://mercurial.selenic.com/wiki/MergeToolConfiguration
#merge = internal:merge

[diff]
git = 1

[merge-tools]

# Meld!
# Not sure how recent the --auto-merge stuff is; can always use meld straight from source
#  git clone http://git.gnome.org/browse/meld
#  See also: http://meldmerge.org/development.html
meld.executable=/home/brian/repos/meld/bin/meld
meld.gui=True

# According to https://mail.gnome.org/archives/meld-list/2013-February/msg00016.html
#  Either meld.premerge should be true, XOR --auto-merge should be used; not both
#  I personally haven't seen any problems with using both, though, so...

# premerge: Use HG's internal:merge first, before passing off to the mergetool in question
meld.premerge=True
# --auto-merge: Let meld try and do some auto merging before passing it off to you, the user
meld.args=--label='local' $local --label='merge' $base --label='other' $other -o $output --auto-merge

[merge-patterns]

# Handy for stuff that's generated at build/compile time, as well as committed to source
#  When it all fails, that's fine, just run "hg resolve [--all | -I '...'] -m" to mark them as
#   resolved
#EXAMPLE_PATTERN/*.html=internal:merge

** = meld

[auth]
#school.schemes = https
#school.prefix = https://sse.se.rit.edu/hg/
#school.username = bmw8952

[extensions]
mq =
color =
purge =
fetch =
#mercurial_keyring =
graphlog =
pager =
rebase =
record =

[pager]
pager = LESS='FRX' less
attend = annotate, cat, diff, export, glog, log, qdiff, shortlog, slog, hist, status, nlog, si, sall, head, incoming, outgoing, heads, gdesc, desc, ahist

[web]
allow_push = *
push_ssl = false

[color]
qseries.applied = magenta bold
status.modified = magenta bold

[http_proxy]
#host = hostallow
#no = don't proxy here

[alias]
si = st -i -X node_modules -I .
sall = st -A -X node_modules -I .
bm = bookmark
br = branches

# History, history, history
nlog = log --style=/home/brian/scripts/map-cmdline.nlog
slog =     log --template '{rev}:{node|short} {date|shortdate} | ({branches} {bookmarks} {tags}) {desc|strip|firstline} [{author|person}]\n'
shortlog = log --template '{rev}:{node|short} {date|shortdate} | ({branches} {bookmarks} {tags}) {desc|strip|firstline} [{author|person}]\n'
desc =     log --template '{rev}:{node|short} {date|shortdate} | ({branches} {bookmarks} {tags}) [{author|person}]\n    {desc|tabindent|tabindent}\n\n'
gdesc =    log --template '{rev}:{node|short} {date|shortdate} | ({branches} {bookmarks} {tags}) [{author|person}]\n    {desc|tabindent|tabindent}\n\n' -G
#hist = shortlog -G
hist = gdesc
ahist = gdesc --rev "ancestors(.)"

open = !f(){ rev=`hg log --template="{node|short}" -l1 -r $1`; gnome-open $(hg paths default)/rev/$rev > /dev/null ; }; f
copy = !f(){ rev=`hg log --template="{node|short}" -l1 -r $1`; echo $(hg paths default | sed -e 's/\/\/.*@/\/\//')/rev/$rev | xclip -selection clipboard ; }; f

# Since patches aren't very good about merges, store our parent and current patch before pulling
pullpatch = !CurPatch=`hg qapplied | tail -1` && $HG bookmark -f -r qparent PatchParent && $HG qpop -a && $HG pull && $HG update && $HG qgoto $CurPatch && $HG qguard -l
pp = pullpatch

prec = purge --all -X node_modules -I .
prej = purge --all -I **/*.rej
porig = purge --all -I **/*.orig
pro = !$HG prej ; $HG porig

# Have I mentioned I like patches?
ql = qguard -l
qg = qgoto
qgg = qguard
qpa = qpop -a
qpoop = qpop
qpooop = qpop
qpoooop = qpop
