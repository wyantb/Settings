snippet _each "_.each(list, fn(val, key) { ... }"
_.each(${0:list}, function (${1:val}, ${2:key}) {
    ${3}
});
endsnippet

snippet define
define([
    $1
], function ($2) {
    'use strict';

    $3
});
endsnippet

snippet clzModule
function $1($2) {
    logger.assert(this && this instanceof $1, '$1 must be created with \'new\'');
    $3
}

var ${4:proto} = $1.prototype;

$5

return $1;
endsnippet

snippet throwerror
var message = '$1';
logger.fatal(message);
throw new Error(message);
endsnippet

snippet excludeValidation
//>>excludeStart("${2:validation}", pragmas.${1:production})
$3
//>>excludeEnd("$2")
endsnippet

snippet includeValidation
//>>includeStart("${2:validation}", pragmas.${1:production})
$3
//>>includeEnd("$2")
endsnippet

snippet loggerWarn
logger.warn('$1');
endsnippet

snippet moduleQunitHarness
module('$1', {
    setup: function () {
    },
    teardown: function () {
    }
});

test('$2', function () {
    $3
});
endsnippet

snippet qunitok
ok($1${2:, '$3'});
endsnippet

snippet qunitstrequal
strictEqual($1, $2${3:, '$4'});
endsnippet
