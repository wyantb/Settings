snippet _each "_.each(list, fn(val, key) { ... }"
_.each(${0:list}, function (${1:val}, ${2:key}) {
    ${3}
});
endsnippet

snippet define
define([
    $1
], function ($2) {
    'use strict';

    $3
});
endsnippet

snippet clzModule
function $1($2) {
    logger.assert(this && this instanceof $1, '$1 must be created with \'new\'');
    $3
}

var ${4:proto} = $1.prototype;

$5

return $1;
endsnippet

snippet throwerror
var message = '$1';
logger.fatal(message);
throw new Error(message);
endsnippet

snippet excludeValidation
//>>excludeStart("${2:validation}", pragmas.${1:production})
$3
//>>excludeEnd("$2")
endsnippet

snippet includeValidation
//>>includeStart("${2:validation}", pragmas.${1:production})
$3
//>>includeEnd("$2")
endsnippet

snippet loggerWarn
logger.warn('$1');
endsnippet

snippet moduleQunitModuleHarness
QUnit.module('$1'${2:, {
    beforeEach : function () {
        this.logHelper = loggerEventor();
    },
    afterEach : function () {
        this.logHelper.detach();
    }
}});

QUnit.test('$3', function (assert) {
    ${4:this.logHelper.failOnWarn();}
    $5
});
endsnippet

snippet qunitTestAssert
QUnit.test('${1:smoke test}', function (assert) {
    ${4:this.logHelper.failOnWarn();}
    $5
});
endsnippet

snippet qunitok
assert.ok($1${2:, '$3'});
endsnippet

snippet qunitstrequal
assert.strictEqual(${1:actual}, ${2:expected}${3:, '$4'});
endsnippet

snippet qunitDeepEqual
assert.deepEqual(${1:actual}, ${2:expected}${3:, '$4'});
endsnippet

snippet snapshotTest
/* eslint-env jest */

import React from 'react'
import renderer from 'react-test-renderer'
import { $1 } from './$1'

it('renders appropriately', () => {
  const component = renderer.create(<$1
  />)
  const tree = component.toJSON()
  expect(tree).toMatchSnapshot()
})
endsnippet
